generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                     String                   @id @default(cuid())
  name                   String
  email                  String?                  @unique
  password               String
  emailVerified          DateTime?
  accounts               Account[]
  refreshTokens          RefreshToken[]
  resetToken             ResetToken[]
  emailVerificationToken EmailVerificationToken[]
  orders                 Order[]
}

model RefreshToken {
  token  String @id
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model ResetToken {
  token     String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  token     String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Trade {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  created_at DateTime     @default(now()) @db.Timestamp(0)
  entry      Float        @default(0) @db.Float
  exit       Float?       @db.Float
  status     Trade_status @default(active)
  amount     Float        @default(1) @db.Float
  order_id   Int?
}

model Order {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  created_at    DateTime     @default(now()) @db.Timestamp(0)
  status        Order_status @default(active)
  user_id       String
  ticker        String       @db.VarChar(10)
  balance       Float        @default(1) @db.Float
  original_amnt Float?       @db.Float
  profit        Float        @default(0) @db.Float
  user          User         @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "userId")
}

enum Order_status {
  active
  closed
}

enum Trade_status {
  active
  closed
}
